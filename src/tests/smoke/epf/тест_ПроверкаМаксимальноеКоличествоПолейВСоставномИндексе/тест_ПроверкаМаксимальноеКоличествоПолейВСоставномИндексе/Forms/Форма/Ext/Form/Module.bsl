#Область ОписаниеПеременных

&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем Утверждения;

#КонецОбласти

#Область ИнтерфейсТестирования

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	СтроковыеУтилиты = КонтекстЯдра.Плагин("СтроковыеУтилиты");
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов, КонтекстЯдраПараметр) Экспорт
	
	Инициализация(КонтекстЯдраПараметр);
	
	Регистры = Регистры("TQM", Ложь);
	
	ИнформационнаяБазаФайловая = ИнформационнаяБазаФайловая();
	
	Для Каждого КлючЗначение Из Регистры Цикл
		
		МассивТестов = КлючЗначение.Значение;
		
		Если МассивТестов.Количество() Тогда
			НаборТестов.НачатьГруппу(КлючЗначение.Ключ, Истина);
		КонецЕсли;
		
		Для Каждого Тест Из МассивТестов Цикл
			
			ИмяПроцедуры = "ТестДолжен_ПроверитьРегистр";
			ТекстПояснения = НСтр("ru = 'Проверка регистра на максимальное количество полей составного индекса'");
			ИмяТеста = КонтекстЯдра.СтрШаблон_("%1 [%2]", Тест.ПолноеИмя, ТекстПояснения); 
			НаборТестов.Добавить( ИмяПроцедуры, НаборТестов.ПараметрыТеста(Тест.Имя, Тест.ПолноеИмя, ИнформационнаяБазаФайловая), ИмяТеста );
			
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры


#КонецОбласти

#Область ЮнитТесты

&НаКлиенте
Процедура ТестДолжен_ПроверитьРегистр(ИмяРегистра, ПолноеИмяРегистра, ИнформационнаяБазаФайловая = Ложь) Экспорт	
	
	Результат = ТестДолжен_ПроверитьРегистрНаСервере(ИмяРегистра, ПолноеИмяРегистра, ИнформационнаяБазаФайловая);
	Утверждения.Проверить(Результат = "", "Максимальное количество полей индекса:" + Результат);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТестДолжен_ПроверитьРегистрНаСервере(ИмяРегистра, ПолноеИмяРегистра, ИнформационнаяБазаФайловая)
	
	Регистр = Метаданные.НайтиПоПолномуИмени(ПолноеИмяРегистра);	
	ОписаниеИндексов = КоллекцияИндексовМетаданных(Регистр);
	
	Результат = Новый Массив;
		
	МаксимальноеКоличествоПолейИндекса = МаксимальноеКоличествоПолейИндекса(ИнформационнаяБазаФайловая);
	
	Для каждого КлючЗначение Из ОписаниеИндексов Цикл
		
		Если КлючЗначение.Значение.Количество() >= МаксимальноеКоличествоПолейИндекса Тогда
			Результат.Добавить(СтрШаблон("%1:%2",КлючЗначение.Ключ,КлючЗначение.Значение.Количество()));
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат СтрСоединить(Результат, Символы.ВК);
	
КонецФункции

&НаСервереБезКонтекста
Функция МаксимальноеКоличествоПолейИндекса(ИнформационнаяБазаФайловая)
	
	Если ИнформационнаяБазаФайловая Тогда
		Возврат 16;
	КонецЕсли; 
	
	Возврат 16;
	
КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

&НаСервереБезКонтекста
Функция КоллекцияИндексовМетаданных(МетаОбъект)
	
	ОписаниеИндексов = Новый Соответствие;
		
	ТаблицаСтруктурыХранения = ПолучитьСтруктуруХраненияБазыДанных(ЗначениеВМассиве(МетаОбъект));
	ТаблицаИндексов = ТаблицаСтруктурыХранения.Найти(МетаОбъект.ПолноеИмя(),"Метаданные"); 
	
	Для каждого _Индекс Из ТаблицаИндексов.Индексы Цикл
		  ОписаниеИндексов.Вставить(_Индекс.ИмяИндексаХранения, _Индекс.Поля);		
	КонецЦикла; 
	
	Возврат ОписаниеИндексов;	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеВМассиве(_Значение)
	
	МассивЗначений = Новый Массив;
	МассивЗначений.Добавить(_Значение);
	Возврат МассивЗначений;
	
КонецФункции

&НаСервереБезКонтекста
Функция Регистры(ПрефиксОбъектов, ОтборПоПрефиксу)
	
	Регистры = Новый Соответствие;
	Регистры.Вставить("РегистрыСведений", Новый Массив);
	Регистры.Вставить("РегистрыНакопления", Новый Массив);
	
	Для Каждого КлючЗначение Из Регистры Цикл
		Для Каждого Регистр Из Метаданные[КлючЗначение.Ключ] Цикл
			
			Если ОтборПоПрефиксу И Не ИмяСодержитПрефикс(Регистр.Имя, ПрефиксОбъектов) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураРегистра = Новый Структура;
			СтруктураРегистра.Вставить("Имя", Регистр.Имя);
			СтруктураРегистра.Вставить("Синоним", Регистр.Синоним);
			СтруктураРегистра.Вставить("ПолноеИмя", Регистр.ПолноеИмя());
			
			КлючЗначение.Значение.Добавить( СтруктураРегистра );
			
		КонецЦикла;	
	КонецЦикла;
	
	Возврат Регистры;

КонецФункции 

&НаСервереБезКонтекста 
Функция ИмяСодержитПрефикс(Имя, Префикс)
	
	Если Не ЗначениеЗаполнено(Префикс) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДлинаПрефикса = СтрДлина(Префикс);
	Возврат СтрНайти(ВРег(Лев(Имя, ДлинаПрефикса)), Префикс) > 0;
	
КонецФункции


&НаСервереБезКонтекста
Функция СтроковыеУтилиты()
	Возврат ВнешниеОбработки.Создать("СтроковыеУтилиты");	
КонецФункции 

// Определяет режим эксплуатации информационной базы файловый (Истина) или серверный (Ложь).
// При проверке используется СтрокаСоединенияИнформационнойБазы, которую можно указать явно.
//
// Параметры:
//  СтрокаСоединенияИнформационнойБазы - Строка - параметр используется, если
//                 нужно проверить строку соединения не текущей информационной базы.
//
// Возвращаемое значение:
//  Булево - Истина, если файловая.
//
&НаКлиентеНаСервереБезКонтекста
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") 
	
	Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	Возврат СтрНайти(ВРег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
	
КонецФункции 
#КонецОбласти