#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

// обработки
Перем КонтекстЯдра;
Перем Утверждения;

#КонецОбласти

#Область ПрограммныйИнтерфейс

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт 
	
	КонтекстЯдра = КонтекстЯдраПараметр;	
	// подключение дополнительных обработок
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов, КонтекстЯдраПараметр) Экспорт 
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	ЗаполнитьДокументами(НаборТестов);
	НаборТестов.СтрогийПорядокВыполнения();
	
КонецПроцедуры

Процедура ПередЗапускомТеста() Экспорт 
	НачатьТранзакцию();	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт	
	Если ТранзакцияАктивна() Тогда
	    ОтменитьТранзакцию();
	КонецЕсли;	
КонецПроцедуры

Процедура ЗаполнитьДокументами(НаборТестов)
	
	_Документы = Документы("TQM", Истина);
	
	Для Индекс = 0 По _Документы.ВГраница() Цикл		
		
		Тест = _Документы[Индекс];              		
		
		ИмяПроцедуры = "ТестДолжен_ПроверитьПериодичностьДокумента";
		
		ТекстПояснения = НСтр("ru = 'Проверка установленной периодичности документа'");
		
		ИмяТеста = КонтекстЯдра.СтрШаблон_("%1 [%2]", Тест.ПолноеИмя, ТекстПояснения); 
		
		НаборТестов.Добавить(ИмяПроцедуры, НаборТестов.ПараметрыТеста(Тест.Имя, Тест.ПолноеИмя), ИмяТеста);	
		
	КонецЦикла; 
	
КонецПроцедуры


#КонецОбласти

#Область ЮнитТесты

Процедура ТестДолжен_ПроверитьПериодичностьДокумента(ИмяДокумента, ПолноеИмяДокумента) Экспорт 
	
	МетаДокумент = Метаданные.НайтиПоПолномуИмени(ПолноеИмяДокумента);

	Непериодический = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Непериодический;
	
	Утверждения.ПроверитьЛожь(
		МетаДокумент.ПериодичностьНомера = Непериодический,
		КонтекстЯдра.СтрШаблон_("У документа [%1] установлена периодичность номера Непериодический", ИмяДокумента));
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныйПрограммныйИнтерфейс
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Документы(ПрефиксОбъектов, ОтборПоПрефиксу)
		
	_Документы = Новый Массив;
	
	Для Каждого _Документ Из Метаданные.Документы Цикл
		
		Если ОтборПоПрефиксу И Не ИмяСодержитПрефикс(_Документ.Имя, ПрефиксОбъектов) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДокумента = Новый Структура;
		СтруктураДокумента.Вставить("Имя", _Документ.Имя);
		СтруктураДокумента.Вставить("Синоним", _Документ.Синоним);
		СтруктураДокумента.Вставить("ПолноеИмя", _Документ.ПолноеИмя());
		
		_Документы.Добавить(СтруктураДокумента);
		
	КонецЦикла;	
	
	Возврат _Документы;

КонецФункции 

Функция ИмяСодержитПрефикс(Имя, Префикс)
	
	Если Не ЗначениеЗаполнено(Префикс) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДлинаПрефикса = СтрДлина(Префикс);
	
	Возврат СтрНайти(ВРег(Лев(Имя, ДлинаПрефикса)), Префикс) > 0;
	
КонецФункции


#КонецОбласти

#Область Инициализация

Настройки = Новый Структура;

#КонецОбласти
    
#Иначе
 ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли